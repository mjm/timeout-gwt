<?xml version="1.0" encoding="utf-8" ?>
<project name="Timeout" default="build" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <property name="ivy.install.version" value="2.1.0"/>
    <condition property="ivy.home" value="${env.IVY_HOME}">
        <isset property="env.IVY_HOME"/>
    </condition>
    <property name="ivy.home" value="${user.home}/.ant"/>
    <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

    <property name="java.src.dir" value="src"/>
    <property name="java.test.dir" value="test"/>

    <property name="gwt.module.name" value="net.moriaritys.timeout.Timeout"/>
    <property name="gwt.module.html" value="Timeout.html"/>

    <property file="deploy.properties"/>

    <target name="download-ivy" unless="offline">
        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
        <!-- try to load ivy here from ivy home, in case the user has not already dropped
it into ant's lib dir (note that the latter copy will always take precedence).
We will not fail as long as local lib dir exists (it may be empty) and
ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <target name="resolve" depends="init-ivy">
        <ivy:configure file="ivysettings.xml"/>
        <ivy:retrieve sync="true" pattern="lib/[type]/[artifact].[ext]"/>
    </target>

    <!-- Configure path to GWT SDK -->
    <property name="gwt.sdk" location="/Users/matt/Downloads/gwt-2.0.0"/>

    <path id="project.class.path">
        <pathelement location="war/WEB-INF/classes"/>
        <fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>
    </path>

    <path id="tools.class.path">
        <path refid="project.class.path"/>
        <pathelement location="lib/jar/gwt-dev.jar"/>
        <pathelement location="${appengine.sdk}/lib/appengine-tools-api.jar"/>
        <fileset dir="${appengine.sdk}/lib/tools">
            <include name="**/asm-*.jar"/>
            <include name="**/datanucleus-enhancer-*.jar"/>
        </fileset>
    </path>

    <target name="libs" depends="resolve" description="Copy libs to WEB-INF/lib">
        <mkdir dir="war/WEB-INF/lib"/>
        <copy todir="war/WEB-INF/lib">
            <fileset dir="lib/jar" includes="*.jar" excludes="gwt-dev.jar"/>
        </copy>
        <copy todir="war/WEB-INF/lib" flatten="true">
            <fileset dir="${appengine.sdk}/lib/user" includes="**/*.jar"/>
        </copy>
    </target>

    <target name="javac" depends="libs" description="Compile java source">
        <mkdir dir="war/WEB-INF/classes"/>
        <javac srcdir="${java.src.dir}" includes="**" encoding="utf-8"
               destdir="war/WEB-INF/classes"
               source="1.5" target="1.5" nowarn="true"
               debug="true" debuglevel="lines,vars,source">
            <classpath refid="project.class.path"/>
        </javac>
        <copy todir="war/WEB-INF/classes">
            <fileset dir="${java.src.dir}" excludes="**/*.java"/>
        </copy>
        <taskdef name="datanucleusenhancer"
                 classpathref="tools.class.path"
                 classname="org.datanucleus.enhancer.tools.EnhancerTask"/>
        <datanucleusenhancer
                classpathref="tools.class.path"
                failonerror="true">
            <fileset dir="war/WEB-INF/classes" includes="**/*.class"/>
        </datanucleusenhancer>
    </target>

    <target name="gwtc" depends="javac" description="GWT compile to JavaScript">
        <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
            <classpath>
                <pathelement location="${java.src.dir}"/>
                <path refid="project.class.path"/>
            </classpath>
            <!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
            <jvmarg value="-Xmx256M"/>
            <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
            <arg value="${gwt.module.name}"/>
        </java>
    </target>

    <target name="devmode" depends="javac" description="Run development mode">
        <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
            <classpath>
                <pathelement location="${java.src.dir}"/>
                <path refid="project.class.path"/>
                <path refid="tools.class.path"/>
            </classpath>
            <jvmarg value="-Xmx256M"/>
            <jvmarg value="-agentlib:jdwp=transport=dt_socket,server=y,address=8001,suspend=n"/>
            <jvmarg value="-javaagent:${appengine.sdk}/lib/agent/appengine-agent.jar"/>
            <arg value="-server"/>
            <arg value="com.google.appengine.tools.development.gwt.AppEngineLauncher"/>
            <arg value="-startupUrl"/>
            <arg value="${gwt.module.html}"/>
            <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
            <arg value="${gwt.module.name}"/>
        </java>
    </target>

    <target name="javac.tests" depends="javac" description="Compiles test code">
        <javac srcdir="${java.test.dir}" includes="**" encoding="utf-8"
               source="1.5" target="1.5" nowarn="true"
               debug="true" debuglevel="lines,vars,source">
            <classpath location="/Users/matt/.m2/repository/junit/junit/4.5/junit-4.5.jar"/>
            <classpath refid="project.class.path"/>
        </javac>
    </target>

    <target name="test.dev" depends="javac.tests" description="Run development mode tests">
        <mkdir dir="reports/htmlunit.dev"/>
        <junit fork="yes" printsummary="yes" haltonfailure="yes">
            <jvmarg line="-Xmx256m"/>
            <sysproperty key="gwt.args" value="-logLevel WARN"/>
            <sysproperty key="java.awt.headless" value="true"/>
            <classpath>
                <pathelement location="src"/>
                <pathelement location="test"/>
                <path refid="project.class.path"/>
                <pathelement location="/Users/matt/.m2/repository/junit/junit/4.5/junit-4.5.jar"/>
            </classpath>
            <batchtest todir="reports/htmlunit.dev">
                <fileset dir="test">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
            <formatter type="plain"/>
            <formatter type="xml"/>
        </junit>
    </target>

    <target name="test.prod" depends="javac.tests" description="Run production mode tests">
        <mkdir dir="reports/htmlunit.prod"/>
        <junit fork="yes" printsummary="yes" haltonfailure="yes">
            <jvmarg line="-Xmx256m"/>
            <sysproperty key="gwt.args" value="-prod -logLevel WARN -out www-test"/>
            <sysproperty key="java.awt.headless" value="true"/>
            <classpath>
                <pathelement location="src"/>
                <pathelement location="test"/>
                <path refid="project.class.path"/>
                <pathelement location="/Users/matt/.m2/repository/junit/junit/4.5/junit-4.5.jar"/>
            </classpath>
            <batchtest todir="reports/htmlunit.prod">
                <fileset dir="test">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
            <formatter type="plain"/>
            <formatter type="xml"/>
        </junit>
    </target>

    <target name="test" description="Run development and production mode tests">
        <antcall target="test.dev"/>
        <antcall target="test.prod"/>
    </target>

    <target name="build" depends="gwtc" description="Build this project"/>

    <target name="war" depends="build" description="Create a war file">
        <mkdir dir="build"/>
        <zip destfile="build/timeout.war" basedir="war"/>
    </target>

    <!--    <target name="deploy" depends="war">
        <taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask"
                 classpath="${tomcat.home}/lib/catalina-ant.jar"/>
        <taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask"
                 classpath="${tomcat.home}/lib/catalina-ant.jar"/>
        <undeploy url="${tomcat.manager.url}"
                  username="${tomcat.username}"
                  password="${tomcat.password}"
                  path="/triumph"
                  failonerror="false"/>
        <deploy url="${tomcat.manager.url}"
                username="${tomcat.username}"
                password="${tomcat.password}"
                path="/timeout"
                war="file:${basedir}/build/timeout.war"/>
    </target>-->

    <target name="clean" description="Cleans this project">
        <delete dir="war/WEB-INF/classes" failonerror="false"/>
        <delete dir="war/timeout" failonerror="false"/>
    </target>

</project>
